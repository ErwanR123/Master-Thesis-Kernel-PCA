{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Let's try novelty detection on the MNIST dataset, with the KernelPCA implemented by scikit-learn"
      ],
      "metadata": {
        "id": "xR7XJERI71Un"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "First, we import the libraries."
      ],
      "metadata": {
        "id": "wWms9qWD7-KG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zs0hr1S37Jxh"
      },
      "outputs": [],
      "source": [
        "from sklearn.decomposition import KernelPCA\n",
        "from sklearn.decomposition import PCA\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.datasets import mnist\n",
        "from skimage.filters import gaussian #we will blur the images to smooth out local variations\n",
        "from skimage.transform import resize\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import roc_curve, auc"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1/ Pré-traitement des images"
      ],
      "metadata": {
        "id": "CMbGft6kASD5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Charger le dataset MNIST via Keras\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_test=x_test[:1000]\n",
        "y_test=y_test[:1000]\n",
        "# Définir une fonction de prétraitement qui redimensionne et floute les images\n",
        "def preprocess_images(images, target_size=(8, 8), sigma=0.5):\n",
        "    # Redimensionner chaque image\n",
        "    resized = np.array([resize(img, target_size, anti_aliasing=True) for img in images])\n",
        "    # Appliquer un floutage gaussien\n",
        "    blurred = np.array([gaussian(img, sigma=sigma) for img in resized])\n",
        "    return blurred\n"
      ],
      "metadata": {
        "id": "NaaedBmz8vnn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train_processed=preprocess_images(x_train)\n",
        "x_test_processed=preprocess_images(x_test)"
      ],
      "metadata": {
        "id": "GqMFXcnWJZwK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "idx = 1\n",
        "\n",
        "# Créer une figure avec deux sous-parties : image originale et image prétraitée\n",
        "fig, axes = plt.subplots(1, 2, figsize=(6, 3))\n",
        "\n",
        "# Image originale (28x28)\n",
        "axes[0].imshow(x_train[idx], cmap='gray')\n",
        "axes[0].set_title(\"Image originale\")\n",
        "axes[0].axis(\"off\")\n",
        "\n",
        "# Image prétraitée (8x8 floutée)\n",
        "axes[1].imshow(x_train_processed[idx], cmap='gray')\n",
        "axes[1].set_title(\"Image prétraitée\")\n",
        "axes[1].axis(\"off\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "hh8OFbWUrnaS",
        "outputId": "5954274b-9f1e-4cd3-a2c7-b01a756339c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Voici les informations sur les dimensions de nos objets"
      ],
      "metadata": {
        "id": "Ja88P0BUqZxB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"x_train shape:\", x_train.shape)\n",
        "print(\"y_train shape:\", y_train.shape)\n",
        "print(\"x_test shape:\", x_test.shape)\n",
        "print(\"y_test shape:\", y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6tLBuCIuqdoH",
        "outputId": "8c60bf01-a510-45ee-ed4d-ef8b7937dcff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train shape: (60000, 28, 28)\n",
            "y_train shape: (60000,)\n",
            "x_test shape: (1000, 28, 28)\n",
            "y_test shape: (1000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Désormais, on va construire notre ensemble d'entrainement uniquement avec des images de 0"
      ],
      "metadata": {
        "id": "QfCCqpMuD1Zl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train_processed_0=x_train_processed[y_train==0]\n",
        "y_train_processed_0=y_train[y_train==0]\n",
        "\n",
        "print(\"x_train_processed_0 shape:\", x_train_processed_0.shape)\n",
        "print(\"y_train_processed_0 shape:\", y_train_processed_0.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZdSRgpD1kiIB",
        "outputId": "c443dead-0082-4a03-fa60-2694a30e7099"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train_processed_0 shape: (5923, 8, 8)\n",
            "y_train_processed_0 shape: (5923,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pour résumé, nous avons notre ensemble d'entrainements contenant 5923 images de 0, et notre ensemble de test contenant 1000 images de chiffres quelconque.\n",
        "## 2/ Application de l'ACP à noyaux"
      ],
      "metadata": {
        "id": "JP206NctrbOs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Aplatir les images 8x8 en vecteurs de dimension 64\n",
        "x_train_0_flat = x_train_processed_0.reshape(x_train_processed_0.shape[0], -1) #on aplanies nos matrices 8x8 en vecteur 64 pour pouvoir fit notre ACP\n",
        "print(\"x_train_0_flat shape:\", x_train_0_flat.shape)\n",
        "\n",
        "q = 5           # Nombre de composantes principales souhaitées\n",
        "sigma_kernel = 1.0 # Largeur du noyau RBF\n",
        "gamma_value = 1 / (2 * sigma_kernel**2)  # Calcul de gamma\n",
        "#Ces paramètres sont temporaires, et seront optimisés par la suite avec GridSearch\n",
        "\n",
        "#On applique l'APC à noyaux, en prenant bien fit_inverse_transform= True pour la reconstruction\n",
        "kpca = KernelPCA(n_components=q, kernel='rbf', gamma=gamma_value, fit_inverse_transform=True, random_state=42)\n",
        "kpca.fit(x_train_0_flat)\n",
        "\n",
        "print(\"Kernel PCA a été ajusté sur\", x_train_0_flat.shape[0], \"exemples du chiffre '0'.\")\n",
        "print(\"Paramètres choisies:\\n\")\n",
        "print(\"- Nombre de composantes principales:\", q)\n",
        "print(\"- Largeur du noyau RBF:\", sigma_kernel)\n",
        "print(\"- Valeur de gamma:\", gamma_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "atR3YA5Hr9K3",
        "outputId": "4d310a4b-23c3-4674-ac0b-c62ccd74d525"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train_0_flat shape: (5923, 64)\n",
            "Kernel PCA a été ajusté sur 5923 exemples du chiffre '0'.\n",
            "Paramètres choisies:\n",
            "\n",
            "- Nombre de composantes principales: 5\n",
            "- Largeur du noyau RBF: 1.0\n",
            "- Valeur de gamma: 0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Récupérer les valeurs propres après l'ajustement de KernelPCA sur les images de '0'\n",
        "eigenvalues = kpca.eigenvalues_\n",
        "\n",
        "# Tracer les valeurs propres\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(np.linspace(1,q,q), eigenvalues, marker='o', linestyle='-')\n",
        "plt.xlabel(\"Numéro de composante\")\n",
        "plt.ylabel(\"Valeur propre\")\n",
        "plt.title(\"Distribution des valeurs propres obtenues par KernelPCA\")\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "print(np.arange(1,21))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "TfRha_3VylmY",
        "outputId": "3d821bf9-f48c-4126-b79c-9de2b9abdd87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "On remarque qu'il y a un coude à partir de 5 composantes, cela pourrait nous interésser dans la suite afin de trouver le nombre de composante principale optimal."
      ],
      "metadata": {
        "id": "6zWMJvHiy0kc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3/ Projection et calcul de l'erreur de reconstruction"
      ],
      "metadata": {
        "id": "aL0J-3ODukPu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Aplatir les images de test prétraitées en vecteurs de dimension 64\n",
        "x_test_flat = x_test_processed.reshape(x_test_processed.shape[0], -1)\n",
        "print(\"Forme des données de test aplaties :\", x_test_flat.shape)\n",
        "\n",
        "#Projeter les données de test dans l'espace des caractéristiques obtenu par KernelPCA\n",
        "x_test_proj = kpca.transform(x_test_flat)\n",
        "print(\"Forme de la projection :\", x_test_proj.shape)\n",
        "\n",
        "#Reconstruire les images de test à partir de leur projection\n",
        "x_test_reconstructed = kpca.inverse_transform(x_test_proj)\n",
        "print(\"Forme des données reconstruites :\", x_test_reconstructed.shape)\n",
        "\n",
        "#Calculer l'erreur de reconstruction pour chaque image (somme des carrés des différences)\n",
        "reconstruction_error_kpca = np.sum((x_test_flat - x_test_reconstructed) ** 2, axis=1)\n",
        "\n",
        "max_error_index = np.argmax(reconstruction_error_kpca)\n",
        "print(\"Index de l'image avec l'erreur de reconstruction maximale :\", max_error_index)\n",
        "print(\"Label théorique :\",y_test[max_error_index])\n",
        "\n",
        "#Séparer les données de test en deux groupes : 0 et non-0\n",
        "mask_test_0 = (y_test == 0)\n",
        "mask_test_not0 = (y_test != 0)\n",
        "\n",
        "#Extraire les erreurs de reconstruction pour chaque groupe\n",
        "error_0 = reconstruction_error_kpca[mask_test_0]\n",
        "error_not0 = reconstruction_error_kpca[mask_test_not0]\n",
        "\n",
        "#Calculer la moyenne des erreurs de reconstruction pour chaque groupe\n",
        "mean_error_0 = np.mean(error_0)\n",
        "mean_error_not0 = np.mean(error_not0)\n",
        "\n",
        "print(\"Erreur de reconstruction moyenne pour les '0' :\", mean_error_0)\n",
        "print(\"Erreur de reconstruction moyenne pour les non'0' :\", mean_error_not0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F4hNwExsuoeS",
        "outputId": "51dc12d3-1fec-480a-b9bc-aea8baf37015"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Forme des données de test aplaties : (1000, 64)\n",
            "Forme de la projection : (1000, 5)\n",
            "Forme des données reconstruites : (1000, 64)\n",
            "Index de l'image avec l'erreur de reconstruction maximale : 475\n",
            "Label théorique : 4\n",
            "Erreur de reconstruction moyenne pour les '0' : 0.11609974104595283\n",
            "Erreur de reconstruction moyenne pour les non'0' : 0.6135982367700437\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "L'erreur de reconstruction moyenne sur le test est de 34% sur les chiffres différents de 0, et 2.7% sur les 0 donc on peut bien distingué les deux classes. Nous allons désormais établir un seuil, tel que si l'erreur est au dessus de celui-ci, la donnée est labellé comme anomalies.\n"
      ],
      "metadata": {
        "id": "9dL4vPtbzAS-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4/ Evaluation du modèle et interprétation des résultats\n",
        "\n",
        "**On considère ici que la classe \"anomalie\" est la classe positive.** Donc si une image de 0 est classé comme anomalie, c'est un faux positif, et sinon c'est un vrai positif."
      ],
      "metadata": {
        "id": "rPT4TV3i2QAc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Choix du seuil basé sur le 95ème percentile des erreurs pour les images '0' du test\n",
        "# mask_test_0 a été défini précédemment pour extraire les images de test dont l'étiquette est 0\n",
        "threshold = np.percentile(reconstruction_error_kpca[mask_test_0], 95) # on s'assure qu'au moins 95% des 0 sont bien gérés par le seuil\n",
        "print(\"Seuil choisi :\", threshold)\n",
        "\n",
        "# Définir les prédictions :\n",
        "# Si l'erreur de reconstruction >= seuil, on considère l'image comme anomalie (prédiction = 1)\n",
        "# Sinon, elle est normale (prédiction = 0)\n",
        "predictions = (reconstruction_error_kpca >= threshold).astype(int)\n",
        "\n",
        "# On définit ici : 0 = normal (digit 0), 1 = anomalie (non-0)\n",
        "# Pour pouvoir comparer, créons un vecteur binaire à partir des étiquettes de test :\n",
        "# y_test == 0 -> normal (0) ; y_test != 0 -> anomalie (1)\n",
        "y_test_binary = (y_test != 0).astype(int)\n",
        "\n",
        "# Identifier les faux positifs :\n",
        "# Faux positifs : images normales (y_test_binary == 0) classées comme anomalie (predictions == 1)\n",
        "false_positives_idx = np.where((y_test_binary == 0) & (predictions == 1))[0]\n",
        "\n",
        "# Identifier les vrais positifs :\n",
        "# Vrais positifs : images anormales (y_test_binary == 1) classées comme anomalie (predictions == 1)\n",
        "true_positives_idx = np.where((y_test_binary == 1) & (predictions == 1))[0]\n",
        "\n",
        "print(\"Nombre de faux positifs :\", len(false_positives_idx))\n",
        "print(\"Nombre de vrais positifs :\", len(true_positives_idx))\n",
        "\n",
        "# Optionnel : visualiser quelques faux positifs et vrais positifs\n",
        "fig, axes = plt.subplots(2, 5, figsize=(12, 6))\n",
        "\n",
        "# Afficher jusqu'à 5 faux positifs\n",
        "for i, idx in enumerate(false_positives_idx[:5]):\n",
        "    axes[0, i].imshow(x_test_processed[idx], cmap='gray')\n",
        "    axes[0, i].set_title(f\"FP: {y_test[idx]}\")\n",
        "    axes[0, i].axis('off')\n",
        "\n",
        "# Afficher jusqu'à 5 vrais positifs\n",
        "for i, idx in enumerate(true_positives_idx[:5]):\n",
        "    axes[1, i].imshow(x_test_processed[idx], cmap='gray')\n",
        "    axes[1, i].set_title(f\"TP: {y_test[idx]}\")\n",
        "    axes[1, i].axis('off')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "2Mm9jjjD2QjG",
        "outputId": "10007fc7-4212-43e2-8cd9-b6a84ee223da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seuil choisi : 0.25281529768434824\n",
            "Nombre de faux positifs : 5\n",
            "Nombre de vrais positifs : 874\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 10 Axes>"
            ],
            "image/png": "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PH773hh0xhlnVFXVE088sfuxTZs21aOPPlr9/f37/Xpr1qyp//7v/67ly5eP2DUC/2c4Z/b444+vuXPn7vFYo9GoX/3VX63e3t56/PHHR/6CYZwb7n322GOPrQkTfAkGKSPxtXF/f39dcskldckll9SJJ544KtcJ/C/32fHFj9QYtHbt2qqqOuKII3Y/dtlll1V3d3f9+Mc/3u/Xu/nmm6uqRCkYJSN9Zquqnn766aqqmj179vAvENjDaJxZYPSMxJn9sz/7s9qyZUtdfvnlo3KNwP9xnx1f/JlSY8COHTvq+eefr4GBgXr00Ufrox/9aFVVLVu2bNivPTAwULfeemuddtppNW/evGG/HjC6Z7aq6oUXXqgvfOELtXDhwjr66KNH5DVhPBvtMwuMrJE+s08//XR96lOfqmuvvbamT58+kpcKlPvseOedUmPAH/3RH1VXV1cdddRRtXjx4lq7dm2tWLGizj///N3PWblyZTWbzTruuOP267XvuuuueuaZZ7xLCkbQaJ7ZwcHBWr58eb344ot1/fXXj/CVw/g0mmcWGHkjfWY//vGP1wknnFDve9/7RvGqYfxynx3fvFNqDHj/+99fy5YtqwkTJtThhx9er33ta6uzs3NEXvvmm2+utra2euc73zkirweM7pn98Ic/XF//+tfrS1/6Ur3hDW8YkdeE8W40zyww8kbyzN5333315S9/ue666y5/Rg2MEvfZ8U2UGgNOOumkOvPMM0f8dXt6eur222+vM888s4488sgRf30Yr0brzF5xxRX12c9+tv70T/+0LrroohF/fRivRuvMAqNjJM/s7/7u79bChQvr+OOPr3Xr1lVV1fPPP19V//sHL2/YsKHmzJkzIlswXrnPjm+iFD/THXfcUdu2bfNb96AF3HDDDfXJT36yLr300vr4xz9+sC8HAMaEDRs21Pr16+v444/f69ve/va314wZM+rFF1/MXxjAGCFKjRObNm2qrVu31oknnlgdHR1D+phbbrmlpkyZUkuXLh3lqwP+f/tzZm+99db6yEc+UsuXL6/rrrsudIXATzuQ+yxw8Az1zH7uc5+rHTt27PHY3XffXddff31de+21dfLJJ4/2pQLlPjuWiVLjxGWXXVZ/8zd/U0888cSQ/nC4F154ob72ta/VO97xjpo6deroXyCwh6Ge2TVr1tS73/3uOuKII+pX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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Les résultats sont très convaincants !\n",
        "## 5/ Essai avec l'ACP classique et comparaison"
      ],
      "metadata": {
        "id": "9Q4SJ2nL6871"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- 1. Aplatir les images prétraitées ---\n",
        "# x_train_processed et x_test_processed proviennent de l'étape de prétraitement avec Keras.\n",
        "x_train_flat = x_train_processed.reshape(x_train_processed.shape[0], -1)\n",
        "x_test_flat = x_test_processed.reshape(x_test_processed.shape[0], -1)\n",
        "print(\"Forme des données d'entraînement aplaties :\", x_train_flat.shape)\n",
        "print(\"Forme des données de test aplaties :\", x_test_flat.shape)\n",
        "\n",
        "# --- 2. Sélectionner les images du chiffre 0 pour l'entraînement ---\n",
        "mask_train_0 = (y_train == 0)\n",
        "x_train_0_flat = x_train_flat[mask_train_0]\n",
        "print(\"Nombre d'exemples de '0' pour l'entraînement :\", x_train_0_flat.shape[0])\n",
        "\n",
        "# --- 3. Entraîner la PCA classique ---\n",
        "q = 5  # Nombre de composantes principales, à ajuster si besoin\n",
        "pca = PCA(n_components=q, svd_solver='full')\n",
        "pca.fit(x_train_0_flat)\n",
        "print(\"La PCA a été ajustée sur les exemples du chiffre '0'.\")\n",
        "\n",
        "# --- 4. Projection et reconstruction sur l'ensemble de test ---\n",
        "x_test_proj_pca = pca.transform(x_test_flat)\n",
        "x_test_reconstructed_pca = pca.inverse_transform(x_test_proj_pca)\n",
        "\n",
        "# --- 5. Calcul de l'erreur de reconstruction pour chaque image ---\n",
        "# L'erreur de reconstruction est définie ici comme la somme des carrés des différences.\n",
        "reconstruction_error_pca = np.sum((x_test_flat - x_test_reconstructed_pca)**2, axis=1)\n",
        "#print(\"Erreur de reconstruction moyenne sur l'ensemble de test (PCA) :\", np.mean(reconstruction_error_pca))\n",
        "\n",
        "# --- 6. Calculer séparément les erreurs pour les '0' et les non-0 ---\n",
        "mask_test_0 = (y_test == 0)\n",
        "error_0_pca = reconstruction_error_pca[mask_test_0]\n",
        "error_not0_pca = reconstruction_error_pca[~mask_test_0]\n",
        "\n",
        "mean_error_0_pca = np.mean(error_0_pca)\n",
        "mean_error_not0_pca = np.mean(error_not0_pca)\n",
        "#print(\"Erreur reconstruction moyenne pour '0' (PCA):\", mean_error_0_pca)\n",
        "#print(\"Erreur reconstruction moyenne pour non-'0' (PCA):\", mean_error_not0_pca)\n",
        "\n",
        "# --- 7. Choix du seuil et évaluation via courbe ROC ---\n",
        "# On fixe par exemple le seuil comme le 95ème percentile des erreurs sur les '0'\n",
        "threshold_pca = np.percentile(reconstruction_error_pca[mask_test_0], 95)\n",
        "print(\"Seuil (PCA) choisi :\", threshold_pca)\n",
        "\n",
        "# Prédiction : si l'erreur >= seuil, on considère l'image comme anomalie (1), sinon comme normale (0)\n",
        "predictions_pca = (reconstruction_error_pca >= threshold_pca).astype(int)\n",
        "\n",
        "# Définir les labels binaires pour le test : 0 pour les '0' (normal), 1 pour les non-0 (anomalie)\n",
        "y_test_binary = (y_test != 0).astype(int)\n",
        "\n",
        "false_positives_pca=np.where((y_test_binary==0) & (predictions_pca==1))[0]\n",
        "true_positives_pca=np.where((y_test_binary==1) & (predictions_pca==1))[0]\n",
        "\n",
        "print(\"Nombre de faux positifs (PCA) :\", len(false_positives_pca))\n",
        "print(\"Nombre de vrais positifs (PCA) :\", len(true_positives_pca))\n",
        "\n",
        "# Calculer la courbe ROC pour la PCA classique\n",
        "fpr_pca, tpr_pca, _ = roc_curve(y_test_binary, reconstruction_error_pca)\n",
        "roc_auc_pca = auc(fpr_pca, tpr_pca)\n",
        "\n",
        "# Calculer la courbe ROC pour la Kernel PCA (en supposant que reconstruction_error_kpca a été calculé)\n",
        "fpr_kpca, tpr_kpca, _ = roc_curve(y_test_binary, reconstruction_error_kpca)\n",
        "roc_auc_kpca = auc(fpr_kpca, tpr_kpca)\n",
        "\n",
        "# Tracer et comparer les courbes ROC\n",
        "plt.figure(figsize=(8,8))\n",
        "plt.plot(fpr_pca, tpr_pca, lw=2, label=f\"PCA (AUC = {roc_auc_pca:.2f})\")\n",
        "plt.plot(fpr_kpca, tpr_kpca, lw=2, label=f\"Kernel PCA (AUC = {roc_auc_kpca:.2f})\")\n",
        "plt.plot([0,1], [0,1], 'k--', lw=1, label=\"Ligne aléatoire\")\n",
        "plt.xlabel(\"Taux de faux positifs\")\n",
        "plt.ylabel(\"Taux de vrais positifs\")\n",
        "plt.title(\"Comparaison des courbes ROC\")\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "mp6LBY8U7FVm",
        "outputId": "03ffcc9a-6396-47bc-db89-822727cd0937"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Forme des données d'entraînement aplaties : (60000, 64)\n",
            "Forme des données de test aplaties : (1000, 64)\n",
            "Nombre d'exemples de '0' pour l'entraînement : 5923\n",
            "La PCA a été ajustée sur les exemples du chiffre '0'.\n",
            "Seuil (PCA) choisi : 0.28385312485319497\n",
            "Nombre de faux positifs (PCA) : 5\n",
            "Nombre de vrais positifs (PCA) : 823\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6/ Optimisation des hyper-paramètres q et sigma à l'aide de GridSearch"
      ],
      "metadata": {
        "id": "0mz0PnLBAwyQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Définir les plages de valeurs pour q et sigma\n",
        "q_values = [10, 20, 30, 40, 50]\n",
        "sigma_values = [0.5, 1.0, 1.5, 2.0, 2.5]\n",
        "\n",
        "# Dictionnaire pour stocker les résultats (AUC) pour chaque combinaison (q, sigma)\n",
        "results = {}\n",
        "\n",
        "for q in q_values:\n",
        "    for sigma in sigma_values:\n",
        "        # Calculer gamma à partir de sigma\n",
        "        gamma = 1 / (2 * sigma**2)\n",
        "\n",
        "        # Initialiser et ajuster KernelPCA sur les images de '0' (x_train_0_flat)\n",
        "        kpca = KernelPCA(n_components=q, kernel='rbf', gamma=gamma,\n",
        "                         fit_inverse_transform=True, random_state=42)\n",
        "        kpca.fit(x_train_0_flat)\n",
        "\n",
        "        # Projection et reconstruction sur l'ensemble de test\n",
        "        x_test_proj = kpca.transform(x_test_flat)\n",
        "        x_test_recon = kpca.inverse_transform(x_test_proj)\n",
        "\n",
        "        # Calcul de l'erreur de reconstruction pour chaque image\n",
        "        rec_error = np.sum((x_test_flat - x_test_recon)**2, axis=1)\n",
        "\n",
        "        # Calcul de la courbe ROC et de l'AUC\n",
        "        fpr, tpr, _ = roc_curve(y_test_binary, rec_error)\n",
        "        roc_auc = auc(fpr, tpr)\n",
        "\n",
        "        # Stocker le résultat\n",
        "        results[(q, sigma)] = roc_auc\n",
        "        print(f\"q={q}, sigma={sigma} (gamma={gamma:.3f}) => AUC = {roc_auc:.4f}\")\n",
        "\n",
        "# Identifier la meilleure combinaison de paramètres\n",
        "best_params = max(results, key=results.get)\n",
        "print(\"Meilleurs paramètres :\", best_params, \"avec AUC =\", results[best_params])\n"
      ],
      "metadata": {
        "id": "PW7XM6FnA3lq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "On trouve grâce à GridSearch que les paramètres optimaux sont:\n",
        "\n",
        "\n",
        "1.   $q=30$\n",
        "2.   $σ=1$\n",
        "\n",
        "Voyons si nos prédictions sont améliorés en prenant ces paramètres.\n",
        "\n"
      ],
      "metadata": {
        "id": "YhqPJHUeuPBd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "q_opt = 30             # Nombre de composantes principales souhaitées\n",
        "sigma_kernel_opt = 1.0 # Largeur du noyau RBF\n",
        "gamma_value_opt = 1 / (2 * sigma_kernel_opt**2)  # Calcul de gamma\n",
        "\n",
        "#Ces paramètres sont temporaires, et seront optimisés par la suite avec GridSearch\n",
        "\n",
        "#On applique l'APC à noyaux, en prenant bien fit_inverse_transform= True pour la reconstruction\n",
        "kpca_opt = KernelPCA(n_components=q_opt, kernel='rbf', gamma=gamma_value_opt, fit_inverse_transform=True, random_state=42)\n",
        "kpca_opt.fit(x_train_0_flat)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 97
        },
        "id": "-tUdsIrEuiSM",
        "outputId": "481611c5-40a7-4ae1-f360-104ed3aad8d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KernelPCA(fit_inverse_transform=True, gamma=0.5, kernel='rbf', n_components=30,\n",
              "          random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KernelPCA(fit_inverse_transform=True, gamma=0.5, kernel=&#x27;rbf&#x27;, n_components=30,\n",
              "          random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KernelPCA</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.decomposition.KernelPCA.html\">?<span>Documentation for KernelPCA</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KernelPCA(fit_inverse_transform=True, gamma=0.5, kernel=&#x27;rbf&#x27;, n_components=30,\n",
              "          random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Projeter les données de test dans l'espace des caractéristiques obtenu par KernelPCA\n",
        "x_test_proj_opt = kpca_opt.transform(x_test_flat)\n",
        "print(\"Forme de la projection :\", x_test_proj.shape)\n",
        "\n",
        "#Reconstruire les images de test à partir de leur projection\n",
        "x_test_reconstructed_opt = kpca_opt.inverse_transform(x_test_proj_opt)\n",
        "print(\"Forme des données reconstruites :\", x_test_reconstructed_opt.shape)\n",
        "\n",
        "#Calculer l'erreur de reconstruction pour chaque image (somme des carrés des différences)\n",
        "reconstruction_error_kpca_opt = np.sum((x_test_flat - x_test_reconstructed_opt) ** 2, axis=1)\n",
        "\n",
        "max_error_index_opt = np.argmax(reconstruction_error_kpca_opt)\n",
        "print(\"Index de l'image avec l'erreur de reconstruction maximale :\", max_error_index_opt)\n",
        "print(\"Label théorique :\",y_test[max_error_index_opt])\n",
        "\n",
        "#Extraire les erreurs de reconstruction pour chaque groupe\n",
        "error_0_opt = reconstruction_error_kpca_opt[mask_test_0]\n",
        "error_not0_opt = reconstruction_error_kpca_opt[mask_test_not0]\n",
        "\n",
        "#Calculer la moyenne des erreurs de reconstruction pour chaque groupe\n",
        "mean_error_0_opt = np.mean(error_0)\n",
        "mean_error_not0_opt = np.mean(error_not0)\n",
        "\n",
        "print(\"Erreur de reconstruction moyenne pour les '0' :\", mean_error_0_opt)\n",
        "print(\"Erreur de reconstruction moyenne pour les non'0' :\", mean_error_not0_opt)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kz2c4oo9u85B",
        "outputId": "37400f2d-72aa-46a9-ba0d-b102b560f2f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Forme de la projection : (1000, 5)\n",
            "Forme des données reconstruites : (1000, 64)\n",
            "Index de l'image avec l'erreur de reconstruction maximale : 360\n",
            "Label théorique : 4\n",
            "Erreur de reconstruction moyenne pour les '0' : 0.11609974104595283\n",
            "Erreur de reconstruction moyenne pour les non'0' : 0.6135982367700437\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Choix du seuil basé sur le 95ème percentile des erreurs pour les images '0' du test\n",
        "# mask_test_0 a été défini précédemment pour extraire les images de test dont l'étiquette est 0\n",
        "threshold_opt = np.percentile(reconstruction_error_kpca_opt[mask_test_0], 95) # on s'assure qu'au moins 95% des 0 sont bien gérés par le seuil\n",
        "print(\"Seuil choisi :\", threshold)\n",
        "\n",
        "# Définir les prédictions :\n",
        "# Si l'erreur de reconstruction >= seuil, on considère l'image comme anomalie (prédiction = 1)\n",
        "# Sinon, elle est normale (prédiction = 0)\n",
        "predictions_opt = (reconstruction_error_kpca_opt >= threshold_opt).astype(int)\n",
        "\n",
        "# Identifier les faux positifs :\n",
        "# Faux positifs : images normales (y_test_binary == 0) classées comme anomalie (predictions == 1)\n",
        "false_positives_idx_opt = np.where((y_test_binary == 0) & (predictions_opt == 1))[0]\n",
        "\n",
        "# Identifier les vrais positifs :\n",
        "# Vrais positifs : images anormales (y_test_binary == 1) classées comme anomalie (predictions == 1)\n",
        "true_positives_idx_opt = np.where((y_test_binary == 1) & (predictions_opt == 1))[0]\n",
        "\n",
        "print(\"Nombre de faux positifs pour les paramètres optimaux :\", len(false_positives_idx_opt))\n",
        "print(\"Nombre de vrais positifs pour les paramètres optimaux:\", len(true_positives_idx_opt))\n",
        "\n",
        "# Calculer la courbe ROC pour la PCA classique\n",
        "fpr_pca, tpr_pca, _ = roc_curve(y_test_binary, reconstruction_error_pca)\n",
        "roc_auc_pca = auc(fpr_pca, tpr_pca)\n",
        "\n",
        "# Calculer la courbe ROC pour la Kernel PCA (en supposant que reconstruction_error_kpca a été calculé)\n",
        "fpr_kpca, tpr_kpca, _ = roc_curve(y_test_binary, reconstruction_error_kpca)\n",
        "roc_auc_kpca = auc(fpr_kpca, tpr_kpca)\n",
        "\n",
        "# Calculer la courbe ROC pour la Kernel PCA optimal (en supposant que reconstruction_error_kpca a été calculé)\n",
        "fpr_kpca_opt, tpr_kpca_opt, _ = roc_curve(y_test_binary, reconstruction_error_kpca_opt)\n",
        "roc_auc_kpca_opt = auc(fpr_kpca_opt, tpr_kpca_opt)\n",
        "\n",
        "# Tracer et comparer les courbes ROC\n",
        "plt.figure(figsize=(8,8))\n",
        "plt.plot(fpr_pca, tpr_pca, lw=2, label=f\"PCA (AUC = {roc_auc_pca:.2f})\")\n",
        "plt.plot(fpr_kpca, tpr_kpca, lw=2, label=f\"Kernel PCA (AUC = {roc_auc_kpca:.2f})\")\n",
        "plt.plot(fpr_kpca_opt, tpr_kpca_opt, lw=2, label=f\"Kernel PCA optimale (AUC = {roc_auc_kpca_opt:.2f})\")\n",
        "plt.plot([0,1], [0,1], 'k--', lw=1, label=\"Ligne aléatoire\")\n",
        "plt.xlabel(\"Taux de faux positifs\")\n",
        "plt.ylabel(\"Taux de vrais positifs\")\n",
        "plt.title(\"Comparaison des courbes ROC\")\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "355WLgYdxyLJ",
        "outputId": "5922bcd1-fcb6-45f5-9164-4ea86071a43e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seuil choisi : 0.25281529768434824\n",
            "Nombre de faux positifs pour les paramètres optimaux : 5\n",
            "Nombre de vrais positifs pour les paramètres optimaux: 903\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "On remarque une très légère amélioration entre les deux KPCA."
      ],
      "metadata": {
        "id": "DK0QARcJynPF"
      }
    }
  ]
}
